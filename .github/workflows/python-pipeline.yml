name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

  unit_tests:
    name: Unit Test & pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check for Unittest files
        run: |
          if [ -z "$(find tests -type f -name 'test_*.py' -exec grep -l 'unittest' {} +)" ]; then
            echo "No Unittest files found."
            exit 1
          fi

      - name: Run unit tests
        env:
          PYTHONPATH: ./src
        run: python -m unittest discover tests

      - name: Check for Pytest files
        run: |
          if [ -z "$(find tests -type f -name 'test_*.py' -exec grep -l 'pytest' {} +)" ]; then
            echo "No Pytest files found."
            exit 1
          fi

      - name: Run pytest
        env:
          PYTHONPATH: ./src
        run: pytest tests --import-mode=append

  coverage_and_sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Step 3: Install Dependencies
      - name: Install dependencies
        run: |
          pip install pytest pytest-cov coverage
      
      # Step 4: Run Tests with Coverage
      - name: Run Pytest with Coverage
        run: |
          pytest --cov=. --cov-report=xml
          coverage report
      
      # Step 5: SonarQube Code Scan
      - name: SonarQube Scan
        id: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Python_GitAction_Scan
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      # Step 6: Wait for SonarQube Quality Gate to pass
      - name: Checks quality gate
        uses: sonarsource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  build_and_publish_package:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    # needs: coverage_and_sonarqube
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check for Changes
        id: changes
        run: |
          git fetch origin development
          if git diff --exit-code HEAD origin/development -- . > /dev/null; then
            echo "Changes detected. Proceeding with version bump and deployment."
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "No changes detected. Skipping version bump and deployment."
            echo "should_deploy=false" >> $GITHUB_ENV
          fi

      - name: Set Deploy Output
        id: set_deploy_output
        run: echo "::set-output name=should_deploy::${{ env.should_deploy }}"

      - name: Increment Version (if needed)
        if: env.should_deploy == 'true'
        run: |
          python bump_version.py
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ env.REPO_NAME }}.git
          git commit -am "Bump version to $(cat version.txt)"
          git push

      - name: Install Build Tools
        if: env.should_deploy == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build Python Package
        if: env.should_deploy == 'true'
        run: |
          python setup.py sdist bdist_wheel

      - name: Configure AWS Credentials
        if: env.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS CodeArtifact
        if: env.should_deploy == 'true'
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain aeiforo \
            --domain-owner 061039767866

      - name: Publish Package
        if: env.should_deploy == 'true'
        run: |
          twine upload --repository codeartifact --verbose dist/*

      - name: Upload Package Artifact to AWS
        if: env.should_deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: calculator-package
          path: dist/*
          
      - name: List Available Package Versions
        run: |
          aws codeartifact list-package-versions \
            --domain aeiforo \
            --domain-owner 061039767866 \
            --repository pypi-store \
            --format pypi \
            --package calculator

      # Install the package
      - name: Install calculator package
        run: |
          pip install calculator==$(cat version.txt) \
            --extra-index-url https://pypi-store.aeiforo.amazonaws.com
          
  deploy_to_ec2_with_swagger:
    name: Deploy to EC2 with Swagger UI
    runs-on: ubuntu-latest
    needs: build_and_publish_package  # Trigger after the package is built and published
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download Latest Package from CodeArtifact
        run: |
          # Authenticate with CodeArtifact
          aws codeartifact login \
            --tool pip \
            --repository pypi-store \
            --domain aeiforo \
            --domain-owner 061039767866

          # Download the latest version of the package
          pip install calculator-package --extra-index-url https://pypi-store.aeiforo.amazonaws.com

      - name: Deploy Package to EC2
        env:
          EC2_USER: "ec2-user"
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Save the private key to a file
          echo "${EC2_KEY}" > ec2-key.pem
          chmod 600 ec2-key.pem

          # Copy package and deployment scripts to EC2
          scp -i ec2-key.pem -r . $EC2_USER@$EC2_HOST:/home/ec2-user/deploy/

          # Deploy on EC2
          ssh -i ec2-key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # Update and install the package
            cd /home/ec2-user/deploy
            pip install --upgrade calculator-package

            # Install Swagger UI
            if [ ! -d "/var/www/swagger-ui" ]; then
              sudo mkdir -p /var/www/swagger-ui
              sudo chown $USER:$USER /var/www/swagger-ui
              git clone https://github.com/swagger-api/swagger-ui.git /var/www/swagger-ui
              cd /var/www/swagger-ui
              npm install
              npm run build
            fi

            # Configure Nginx to Serve Swagger UI
            if [ ! -f "/etc/nginx/sites-available/swagger" ]; then
              echo "server {
                listen 80;
                server_name _;
                root /var/www/swagger-ui/dist;
                index index.html;
                location / {
                  try_files \$uri \$uri/ =404;
                }
              }" | sudo tee /etc/nginx/sites-available/swagger
              sudo ln -s /etc/nginx/sites-available/swagger /etc/nginx/sites-enabled/
              sudo systemctl restart nginx
            fi

            echo "Deployed successfully!"
          EOF

      - name: Notify Success
        run: echo "Successfully deployed package and Swagger UI to EC2."
