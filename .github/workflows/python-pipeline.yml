name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Check for Unit Test Files
        run: |
          if ! ls tests/*_test.py 1> /dev/null 2>&1; then
            echo "No unit test files found. Exiting..."
            exit 1
          fi

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s tests -p '*_test.py' -v

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-results-${{ env.VERSION }}
          path: junit/unittest-results.xml

  pytest_tests:
    name: Run Pytest Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Check for Pytest Files
        run: |
          if ! ls tests/*_test.py 1> /dev/null 2>&1; then
            echo "No pytest files found. Exiting..."
            exit 1
          fi

      - name: Run Pytest
        run: |
          pytest --maxfail=1 --disable-warnings -v

      - name: Upload Pytest Results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ env.VERSION }}
          path: junit/pytest-results.xml

  check_flask_version:
    name: Check Flask Version
    runs-on: ubuntu-latest
    steps:
      - name: Check Flask Version
        run: |
          python -c "import flask; print('Flask version:', flask.__version__)"
          
  install_flask_and_flasgger:
    name: Install Flask and Flasgger
    runs-on: ubuntu-latest
    steps:
      - name: Install Flask and Flasgger
        run: |
          pip install flask==2.2.3
          pip install flasgger==0.9.5


  # coverage_and_sonarqube:
  #   name: Code Coverage and SonarQube Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         repository: ${{ env.REPO_NAME }}

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pytest pytest-cov

  #     - name: Run Pytest with Coverage
  #       run: |
  #         pytest --cov=. --cov-report=xml

  #     - name: SonarQube Scan
  #       id: sonarqube_scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #       with:
  #         projectBaseDir: .
  #         args: >
  #           -Dsonar.projectKey=Python_GitAction_Scan
  #           -Dsonar.python.coverage.reportPaths=coverage.xml
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #     - name: Checks quality gate
  #       uses: sonarsource/sonarqube-quality-gate-action@v1
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # build_and_publish_package:
  #   name: Build and Publish Python Package to AWS CodeArtifact
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set Up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Check for Changes
  #       id: changes
  #       run: |
  #         git fetch origin main
  #         if git diff --exit-code HEAD origin/main -- . > /dev/null; then
  #           echo "No changes detected. Skipping version bump and deployment."
  #           echo "should_deploy=true" >> $GITHUB_ENV
  #         else
  #           echo "Changes detected. Proceeding with version bump and deployment."
  #           echo "should_deploy=false" >> $GITHUB_ENV
  #         fi

  #     - name: Increment Version (if needed)
  #       if: ${{ env.should_deploy == 'false' }}
  #       run: |
  #         python bump_version.py
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git commit -am "Bump version to $(cat version.txt)"
  #         git push

  #     - name: Install Build Tools
  #       if: ${{ env.should_deploy == 'false' }}
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install setuptools wheel twine

  #     - name: Build Python Package
  #       if: ${{ env.should_deploy == 'false' }}
  #       run: |
  #         python setup.py sdist bdist_wheel

  #     - name: Configure AWS Credentials
  #       if: ${{ env.should_deploy == 'false' }}
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Login to AWS CodeArtifact
  #       if: ${{ env.should_deploy == 'false' }}
  #       run: |
  #         aws codeartifact login \
  #           --tool twine \
  #           --repository pypi-store \
  #           --domain ak \
  #           --domain-owner 897729129103

  #     - name: Publish Package
  #       if: ${{ env.should_deploy == 'false' }}
  #       run: |
  #         twine upload --repository codeartifact --verbose dist/*

  #     - name: Upload Package Artifact to GitHub
  #       if: ${{ env.should_deploy == 'false' }}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: calculator-package
  #         path: dist/*

  # deploy:
  #   name: Deploy to EC2 and Setup Nginx and Gunicorn
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.8'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Install Gunicorn
  #       run: pip install gunicorn

  #     - name: Start Gunicorn
  #       run: |
  #         gunicorn --bind 0.0.0.0:8001 app:app --daemon

  #     - name: Set up Nginx configuration
  #       run: |
  #         sudo mkdir -p /etc/nginx/conf.d
  #         echo "
  #         server {
  #             listen 80;
  #             server_name 54.161.43.43;
  #             location / {
  #                 proxy_pass http://127.0.0.1:8001;
  #                 proxy_set_header Host \$host;
  #                 proxy_set_header X-Real-IP \$remote_addr;
  #                 proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  #                 proxy_set_header X-Forwarded-Proto \$scheme;
  #             }
  #         }
  #         " | sudo tee /etc/nginx/conf.d/swagger_server.conf

  #     - name: Test Nginx configuration
  #       run: sudo nginx -t

  #     - name: Start Nginx if not running
  #       run: sudo systemctl start nginx

  #     - name: Reload Nginx
  #       run: sudo systemctl reload nginx

  #     - name: Enable Nginx to start on boot
  #       run: sudo systemctl enable nginx

  #     - name: Check application health
  #       run: |
  #         curl -s http://localhost:80/health
