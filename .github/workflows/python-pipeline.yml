name: Python CI/CD Pipeline


permissions:
  contents: write    # Both read and write access to repository contents
  
on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

  unit_tests:
    name: Unit Test & pytest 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check for Unittest files
        run: |
          if [ -z "$(find tests -type f -name 'test_*.py' -exec grep -l 'unittest' {} +)" ]; then
            echo "No Unittest files found."
            exit 1
          fi

      - name: Run unit tests
        env:
          PYTHONPATH: ./src
        run: python -m unittest discover tests

      - name: Check for Pytest files
        run: |
          if [ -z "$(find tests -type f -name 'test_*.py' -exec grep -l 'pytest' {} +)" ]; then
            echo "No Pytest files found."
            exit 1
          fi

      - name: Run pytest
        env:
          PYTHONPATH: ./src
        run: pytest tests --import-mode=append

  coverage_and_sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Code Coverage
        run: |
          pytest --cov=. --cov-report=xml
          coverage run -m unittest discover
          coverage report

      - name: SonarQube Scan
        id: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Python_GitAction_Scan
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_and_publish_package:
    name: Artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check for Changes
        id: changes
        run: |
          git fetch origin development
          if git diff --exit-code HEAD origin/development -- . > /dev/null; then
            echo "Changes detected. Proceeding with version bump and deployment."
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "No changes detected. Skipping version bump and deployment."
            echo "should_deploy=false" >> $GITHUB_ENV
          fi

      - name: Increment Version (if needed)
        if: env.should_deploy == 'true'
        env:
            MY_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          python bump_version.py
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ env.REPO_NAMEÂ }}.git
          git commit -am "Bump version to $(cat version.txt)"
          git push

      - name: Install Build Tools
        if: env.should_deploy == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build Python Package
        if: env.should_deploy == 'true'
        run: |
          python setup.py sdist bdist_wheel

      - name: Configure AWS Credentials
        if: env.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS CodeArtifact
        if: env.should_deploy == 'true'
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain ak \
            --domain-owner 897729129103

      - name: Publish Package
        if: env.should_deploy == 'true'
        run: |
          twine upload --repository codeartifact --verbose dist/*

      - name: Upload Package Artifact to AWS
        if: env.should_deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: calculator-package
          path: dist/*

  deploy_swagger_api:
    name: Swagger API 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # EC2 private key stored as a GitHub Secret

      - name: Deploy Swagger API on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Update system packages
            sudo yum update -y
            
            # Install git and clone the repository
            sudo yum install git -y
            git clone https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/aeiforo-co-uk/dt-python-app1-testing-repo.git
            cd /home/ec2-user/dt-python-app1-testing-repo
            # Check out the desired branch
            git checkout development
            
            # Install Python and pip
            sudo yum install python3 -y
            sudo yum install python3-pip -y
            
            # Install dependencies
            sudo pip3 install flasgger
            pip3 install -r requirements.txt
            sudo pip3 install Flask Flask-RESTful flask-swagger-ui
            
            # Run the Flask app
            nohup python3 app.py > app.log 2>&1 &
          EOF

      - name: Output Swagger URL
        run: |
          echo "Swagger API deployed successfully!"
          echo "Access the Swagger UI at http://${{ secrets.EC2_PUBLIC_IP }}:5001/apidocs"
