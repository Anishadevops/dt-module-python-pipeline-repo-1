name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        env:
          PYTHONPATH: ./src
        run: python -m unittest discover tests

  build_and_publish_package:
    name: Build and Publish Python Package to AWS CodeArtifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build Python Package
        run: |
          python setup.py sdist bdist_wheel

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS CodeArtifact
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain ak \
            --domain-owner 897729129103

      - name: Publish Package
        run: |
          twine upload --repository codeartifact --verbose dist/*

  deploy:
    name: Deploy to EC2 and Serve Swagger
    runs-on: ubuntu-latest
    needs: build_and_publish_package
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/dt-python-app1-testing-repo/

            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate the virtual environment
            source venv/bin/activate

            # Install dependencies if requirements.txt exists
            if [ -f "requirements.txt" ]; then
              sudo python3 -m pip install --upgrade pip
              sudo python3 -m pip install -r requirements.txt
            else
              echo "requirements.txt not found!"
              exit 1
            fi

            # Run the application (app.py)
            python3 app.py &  # Run app.py in the background

            # Optionally, restart any related services if needed
            sudo systemctl restart my-python-app.service
          EOF
