name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: false
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

  unit_tests:
    name: Unit Test & pytest
    runs-on: ubuntu-latest
    needs: source_checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install pytest explicitly if not in requirements.txt
          pip install pytest
      
      - name: Check for Unittest files
        run: |
          if [ -z "$(find ./*/tests -type f -name 'test_*.py' -exec grep -l 'unittest' {} +)" ]; then
            echo "No Unittest files found."
            exit 1
          fi
      
      - name: Run unit tests
        env:
          PYTHONPATH: ./*
        run: python -m unittest discover ./*/tests
      
      - name: Check for Pytest files
        run: |
          if [ -z "$(find ./*/tests -type f -name 'test_*.py' -exec grep -l 'pytest' {} +)" ]; then
            echo "No Pytest files found."
            exit 1
          fi
      
      - name: Run pytest
        env:
          PYTHONPATH: ./*
        run: pytest ./*/tests --import-mode=append



  coverage_and_sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
      # needs: unit_tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Code Coverage
        run: |
          pytest --cov=. --cov-report=xml
          coverage report

      - name: SonarQube Scan
        id: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Python_GitAction_Scan
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: Checks quality gate
        uses: sonarsource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  build_and_publish_package:
    name: Build, Publish, and Deploy Package
    runs-on: ubuntu-latest
    # needs: coverage_and_sonarqube
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
  
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
  
      - name: Check for Changes
        id: changes
        run: |
          git fetch origin development
          if git diff --exit-code HEAD origin/development -- . > /dev/null; then
            echo "Changes detected. Proceeding with version bump and deployment."
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "No changes detected. Skipping version bump and deployment."
            echo "should_deploy=false" >> $GITHUB_ENV
          fi
          
      - name: Set Deploy Output
        id: set_deploy_output
        run: echo "::set-output name=should_deploy::${{ env.should_deploy }}"
  
      - name: Increment Version (if needed)
        if: env.should_deploy == 'true'
        run: |
          python bump_version.py
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ env.REPO_NAME }}.git
          git commit -am "Bump version to $(cat version.txt)"
          git push
  
      - name: Install Build Tools
        if: env.should_deploy == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
  
      - name: Build Python Package
        if: env.should_deploy == 'true'
        run: |
          python setup.py sdist bdist_wheel
  
      - name: Configure AWS Credentials
        if: env.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Login to AWS CodeArtifact
        if: env.should_deploy == 'true'
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain aeiforo \
            --domain-owner 061039767866
  
      - name: Publish Package
        if: env.should_deploy == 'true'
        run: |
          twine upload --repository codeartifact --verbose dist/*
  
      - name: Upload Package Artifact to AWS
        if: env.should_deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sustainos_cement-package
          path: dist/*
          
       # Step to Build Docker Images
      - name: Set up Docker image for deployment
        if: env.should_deploy == 'true'
        run: |
          # Generate a simplified version tag based on the GitHub Actions run number
          VERSION_TAG=v$(( $(aws ecr describe-images --repository-name ${{ secrets.ECR_REPO_NAME }} --query 'imageDetails[].imageTags[]' --output text | grep -o 'v[0-9]*' | sed 's/v//' | sort -n | tail -1 2>/dev/null || echo 0) + 1 ))
      
          # Build the Docker image with the version tag and latest tag
          docker build -t ${{ secrets.ECR_REPO_NAME }}:${VERSION_TAG} -t ${{ secrets.ECR_REPO_NAME }}:latest .
      
          # Tag the image with the correct ECR repository URL format
          docker tag ${{ secrets.ECR_REPO_NAME }}:${VERSION_TAG} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${VERSION_TAG}
          docker tag ${{ secrets.ECR_REPO_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
      
          # Authenticate Docker to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
      
          # Push the image to ECR with both tags
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${VERSION_TAG}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
