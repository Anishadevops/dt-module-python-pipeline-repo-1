name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

  unit_tests:
    name: Unit Test & pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check for Unittest files
        run: |
          if [ -z "$(find tests -type f -name 'test_*.py' -exec grep -l 'unittest' {} +)" ]; then
            echo "No Unittest files found."
            exit 1
          fi

      - name: Run unit tests
        env:
          PYTHONPATH: ./src
        run: python -m unittest discover tests

      - name: Check for Pytest files
        run: |
          if [ -z "$(find tests -type f -name 'test_*.py' -exec grep -l 'pytest' {} +)" ]; then
            echo "No Pytest files found."
            exit 1
          fi

      - name: Run pytest
        env:
          PYTHONPATH: ./src
        run: pytest tests --import-mode=append

  coverage_and_sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Code Coverage
        run: |
          pytest --cov=. --cov-report=xml
          coverage report

      - name: SonarQube Scan
        id: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Python_GitAction_Scan
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_and_publish_package:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.set_deploy_output.outputs.should_deploy }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check for Changes
        id: changes
        run: |
          git fetch origin development
          if git diff --exit-code HEAD origin/development -- . > /dev/null; then
            echo "Changes detected. Proceeding with version bump and deployment."
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "No changes detected. Skipping version bump and deployment."
            echo "should_deploy=false" >> $GITHUB_ENV
          fi

      - name: Set Deploy Output
        id: set_deploy_output
        run: echo "::set-output name=should_deploy::${{ env.should_deploy }}"

      - name: Increment Version (if needed)
        if: env.should_deploy == 'true'
        run: |
          python bump_version.py
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ env.REPO_NAME }}.git
          git commit -am "Bump version to $(cat version.txt)"
          git push

      - name: Install Build Tools
        if: env.should_deploy == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build Python Package
        if: env.should_deploy == 'true'
        run: |
          python setup.py sdist bdist_wheel

      - name: Configure AWS Credentials
        if: env.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS CodeArtifact
        if: env.should_deploy == 'true'
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain aeiforo \
            --domain-owner 061039767866

      - name: Publish Package
        if: env.should_deploy == 'true'
        run: |
          twine upload --repository codeartifact --verbose dist/*

      - name: Upload Package Artifact to AWS
        if: env.should_deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: calculator-package
          path: dist/*

  deploy_to_ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build_and_publish_package
    if: ${{ needs.build_and_publish_package.outputs.should_deploy == 'true' }}
    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the entire repository history is fetched
  
      # Step 2: Debug - List files to confirm version.txt exists
      - name: List Files in Repository
        run: ls -al
  
      # Step 3: Verify that version.txt exists and display its content
      - name: Verify version.txt
        run: cat ./version.txt
  
      # Step 4: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      # Step 5: Fetch the latest artifact from AWS CodeArtifact
      - name: Debug Version
        run: |
          echo "Version in file: $(cat version.txt)"
  
      # Step 6: Get Latest Artifact from CodeArtifact
      - name: Get Latest Artifact from CodeArtifact
        run: |
          aws codeartifact get-package-version-asset \
            --domain aeiforo \
            --domain-owner *** \
            --repository pypi-store \
            --format pypi \
            --package calculator-package \
            --package-version $(cat version.txt) \
            --asset-name "calculator-package-$(cat version.txt).zip" \
            --output json \
            | tee /tmp/codeartifact_output.json
          cat /tmp/codeartifact_output.json  # Debug: View the full response
          jq -r '.asset' /tmp/codeartifact_output.json > calculator-package.zip
          ls -lh calculator-package.zip  # Debug - Ensure the artifact is downloaded

  
      # Step 7: Transfer the artifact to EC2
      - name: Transfer Artifact to EC2
        env:
          ARTIFACT_FILE: calculator-package.zip
        run: |
          echo "Transferring artifact: $ARTIFACT_FILE to EC2"
          scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} $ARTIFACT_FILE ec2-user@${{ secrets.EC2_INSTANCE_IP }}:/home/ec2-user/
  
      # Step 8: Deploy the artifact on EC2
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ec2-user@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            # Variables for deployment
            APP_NAME="calculator-app"
            ARTIFACT_FILE="calculator-package.zip"
            INSTALL_DIR="/home/ec2-user/$APP_NAME"
  
            # Unzip the package
            unzip $ARTIFACT_FILE -d $INSTALL_DIR
  
            # Install dependencies
            cd $INSTALL_DIR
            pip install -r requirements.txt
  
            # Assuming Swagger UI server or API server is already set up
            # Restart the application (Swagger UI server or the API server)
            sudo systemctl restart $APP_NAME
  
            # Optionally restart the web server for Swagger UI (adjust service name if needed)
            sudo systemctl restart apache2  # or nginx, depending on your setup
  
            echo "Deployment complete for ${APP_NAME}."
            exit
          EOF
