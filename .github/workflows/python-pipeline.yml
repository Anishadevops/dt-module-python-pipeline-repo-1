name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s tests -p '*_test.py' -v

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-results-${{ env.VERSION }}
          path: junit/unittest-results.xml

  deploy_swagger:
    name: Deploy Swagger to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Archive Swagger Files
        run: |
          tar -czvf swagger.tar.gz swagger/

      - name: Upload Swagger Files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > key.pem
          chmod 600 key.pem
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          scp -i key.pem swagger.tar.gz $EC2_USER@$EC2_HOST:/home/$EC2_USER/swagger.tar.gz

      - name: Deploy Swagger on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh -i key.pem $EC2_USER@$EC2_HOST <<EOF
          mkdir -p /home/$EC2_USER/swagger
          tar -xzvf /home/$EC2_USER/swagger.tar.gz -C /home/$EC2_USER/swagger
          EOF

      - name: Verify Swagger Deployment
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "Verifying Swagger deployment..."
          curl -I http://$EC2_HOST/swagger/index.html || exit 1

      - name: Test API Endpoints
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "Testing API endpoints..."
          ENDPOINTS=(
            "/api/v1/resource1"
            "/api/v1/resource2"
          )
          for endpoint in "${ENDPOINTS[@]}"; do
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" "http://$EC2_HOST$endpoint")
            if [ "$STATUS_CODE" -ne 200 ]; then
              echo "Endpoint $endpoint failed with status code $STATUS_CODE"
              exit 1
            fi
          done
          echo "All API endpoints are working correctly."
