name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}  # Your server's hostname or IP
  SERVER_USER: ${{ secrets.SERVER_USER }}  # The server username
  SERVER_KEY: ${{ secrets.SERVER_SSH_KEY }}  # The private SSH key for accessing the server

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s tests -p '*_test.py' -v

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-results-${{ env.VERSION }}
          path: junit/unittest-results.xml

  pytest_tests:
    name: Run Pytest Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: |
          pytest --maxfail=1 --disable-warnings -v

      - name: Upload Pytest Results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ env.VERSION }}
          path: junit/unittest-results.xml

  swagger_generation:
    name: Generate Swagger Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flasgger  # For Flask apps (if you're using FastAPI, use FastAPI and uvicorn)

      - name: Generate Swagger Docs
        run: |
          # For Flask, you can generate Swagger documentation like this:
          python -m flasgger.generate --app your_flask_app.py --output swagger.json
          # Or for FastAPI:
          # uvicorn your_fastapi_app:app --reload --docs --host 0.0.0.0 --port 8000

      - name: Upload Swagger Docs as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: swagger-docs-${{ env.VERSION }}
          path: swagger.json  # Path to your generated Swagger documentation

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: SonarQube Scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip -d $HOME
          export PATH="$HOME/sonar-scanner-4.8.0.2856-linux/bin:$PATH"

          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.exclusions="**/tests/**" \
            -Dsonar.qualitygate.wait=true

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [source_checkout, unit_tests, pytest_tests, swagger_generation]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_KEY }}
          script: |
            cd /path/to/your/project/directory
            git pull origin main
            pip install -r requirements.txt
            python your_flask_app.py  # or the command for your app's server
