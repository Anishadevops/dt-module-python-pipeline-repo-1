name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: true
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s tests -p '*_test.py' -v

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-results-${{ env.VERSION }}
          path: junit/unittest-results.xml

  pytest_tests:
    name: Run Pytest Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: |
          pytest --maxfail=1 --disable-warnings -v

      - name: Upload Pytest Results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ env.VERSION }}
          path: junit/unittest-results.xml

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: SonarQube Scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip -d $HOME
          export PATH="$HOME/sonar-scanner-4.8.0.2856-linux/bin:$PATH"

          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.exclusions="**/tests/**" \
            -Dsonar.qualitygate.wait=true

  openapi_validation_and_codegen:
    name: OpenAPI Validation & Code Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install openapi-spec-validator requests pytest

      # Start the API server in the background for validation
      - name: Start API Server
        run: |
          nohup uvicorn main:app --host 127.0.0.1 --port 8000 &

      # Wait for the server to be ready (can be adjusted as needed)
      - name: Wait for API server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://127.0.0.1:8000/openapi.json > /dev/null; then
              echo "API is up"
              break
            fi
            echo "Waiting for API to start..."
            sleep 2
          done

      # Validate OpenAPI Spec
      - name: Validate OpenAPI Spec
        run: |
          curl -s http://127.0.0.1:8000/openapi.json -o openapi.json
          openapi-spec-validator openapi.json

      # Run API Tests
      - name: Run API Tests
        run: |
          pytest --maxfail=1 --disable-warnings -v

      # Generate Client Stubs
      - name: Generate Client Stubs
        run: |
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.6.0/openapi-generator-cli-6.6.0.jar -O openapi-generator-cli.jar
          java -jar openapi-generator-cli.jar generate \
            -i http://127.0.0.1:8000/openapi.json \
            -g python \
            -o generated_client

      # Generate Server Stubs
      - name: Generate Server Stubs
        run: |
          java -jar openapi-generator-cli.jar generate \
            -i http://127.0.0.1:8000/openapi.json \
            -g python-fastapi \
            -o generated_server

      # Upload Generated Artifacts
      - name: Upload Generated Code
        uses: actions/upload-artifact@v3
        with:
          name: generated-code
          path: |
            generated_client
            generated_server

  build_and_publish_package:
    name: Build and Publish Python Package to AWS CodeArtifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build Python Package
        run: |
          python setup.py sdist bdist_wheel

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS CodeArtifact
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain aeiforo \
            --domain-owner 061039767866

      - name: Publish Package
        run: |
          twine upload --repository codeartifact --verbose dist/*

      - name: Upload Package Artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: calculator-package
          path: dist/*
